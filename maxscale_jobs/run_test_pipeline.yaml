- job:
    name: run_test_pipeline
    description: 'View: test. This job perform integration testing of maxscale'
    project-type: pipeline
    parameters:
        - !include: './maxscale_jobs/include/boxes_all_incl.yaml'
        - !include: './maxscale_jobs/include/products_incl.yaml'
        - !include: './maxscale_jobs/include/versions_incl.yaml'
        - !include: './maxscale_jobs/include/do_not_destroy_vm.yaml'
        - !include: './maxscale_jobs/include/smoke.yaml'
        - !include: './maxscale_jobs/include/big.yaml'
        - !include: './maxscale_jobs/include/backend_ssl.yaml'
        - !include: './maxscale_jobs/include/name.yaml'
        - !include: './maxscale_jobs/include/target.yaml'
        - !include: './maxscale_jobs/include/test_set.yaml'
        - !include: './maxscale_jobs/include/use_snapshots.yaml'
        - !include: './maxscale_jobs/include/ci_url.yaml'
        - !include: './maxscale_jobs/include/logs_dir.yaml'
        - !include: './maxscale_jobs/include/no_vm_revert.yaml'
        - !include: './maxscale_jobs/include/templates.yaml'
        - string:
            name: config_to_clone
            description: !include: './maxscale_jobs/include/config_to_clone.yaml'
        - !include: './maxscale_jobs/include/test_branch.yaml'
        - !include: './maxscale_jobs/include/slave.yaml'
    properties:
      - throttle:
          option: project
          max-per-node: 1
          max-total: 25
          enabled: true
    dsl: |
        pipeline {
            agent any
            
            stages {
                stage('Delete workspace before build starts') {
                    steps {
                        deleteDir()
                    }
                }
                stage('SCM') {
                    steps {
                        checkout changelog: false,
                            poll: false,
                            scm: [
                                $class: 'GitSCM',
                                branches: [[name: env.test_branch]],
                                doGenerateSubmoduleConfigurations: false,
                                extensions: [[$class: 'WipeWorkspace']],
                                submoduleCfg: [],
                                userRemoteConfigs: [[url: 'https://github.com/mariadb-corporation/maxscale.git']]
                            ]
                    }
                }
                
                stage('Create env vars') {
                    steps {
                        script {
                            Date date = new Date()
                            String timestamp = date.format("yyyy-MM-dd HH-mm-ss")
                            
                            env.BUILD_TIMESTAMP = timestamp
                            env.BUILD_LOG_PARSING_RESULT = 'Build log parsing finished with an error'
                        }
                    }
                }
                stage('Run test and collect') {
                    steps {
                        sh '''if [ ! -d ./maxscale-system-test/mdbci ] ; then
                            mkdir default-maxscale-branch
                            cd default-maxscale-branch
                            git clone https://github.com/mariadb-corporation/MaxScale.git
                            cd ..
                            cp -r default-maxscale-branch/MaxScale/maxscale-system-test/mdbci maxscale-system-test
                        fi
                        export no_vm_revert="no"
                        maxscale-system-test/mdbci/run_test.sh | tee $WORKSPACE/build_log_$BUILD_ID; echo ${PIPESTATUS[0]} > result_$BUILD_ID'''
                    }
                }
                stage('Parse build log') {
                    steps {
                        sh '''$HOME/mdbci/scripts/build_parser/parse_ctest_log.rb  -l $WORKSPACE/build_log_$BUILD_ID -o $WORKSPACE/results_$BUILD_ID -r -f -j $WORKSPACE/json_$BUILD_ID -s $WORKSPACE/$JOB_NAME-$BUILD_ID/ctest_sublogs/
                        for i in $(ls "$WORKSPACE/$JOB_NAME-$BUILD_ID/ctest_sublogs/"); do
                            mkdir -p $HOME/LOGS/$JOB_NAME-$BUILD_ID/LOGS/$i
                            cp "$WORKSPACE/$JOB_NAME-$BUILD_ID/ctest_sublogs/$i/ctest_sublog" "$HOME/LOGS/$JOB_NAME-$BUILD_ID/LOGS/$i/"
                        done'''
                    }
                }
                stage('Inject build results') {
                    steps {
                        load "${WORKSPACE}/results_$BUILD_ID"
                    }
                }
                stage('Create env coredumps') {
                    steps {
                        sh '''coredumps=$($HOME/mdbci/scripts/build_parser/coredump_finder.sh $JOB_NAME-$BUILD_NUMBER url)
                        echo "COREDUMPS \\\\" > $WORKSPACE/coredumps_$BUILD_ID
                        if [[ -z "$coredumps" ]]; then
                                echo "Coredumps was not found for build $BUILD_NUMBER" >> $WORKSPACE/coredumps_$BUILD_ID
                        else
                                echo
                                for coredump in $coredumps; do
                                printf "$coredump \\\\\\n" >> $WORKSPACE/coredumps_$BUILD_ID
                                done
                        fi
                        cp $WORKSPACE/build_log_$BUILD_ID $HOME/LOGS/$JOB_NAME-$BUILD_ID/'''
                    }
                }
                stage('Inject coredumps var') {
                    steps {
                        load "${WORKSPACE}/coredumps_$BUILD_ID"
                    }
                }
                stage('Write build results') {
                    steps {
                        sh '$HOME/mdbci/scripts/build_parser/write_build_results.rb -f $WORKSPACE/json_$BUILD_ID; exit `cat result_$BUILD_ID`'
                    }
                }
                stage('Publish ReportPortal') {
                    steps {
                        sh '$HOME/mdbci/scripts/build_parser/report_portal/bin/upload_testrun.rb $WORKSPACE/json_$BUILD_ID $HOME/report-portal-config.yml'
                    }
                }
            }
            
            post {
                always {
                    emailext body: "${env.DEFAULT_CONTENT}\n" +
                        "Rebuild here: ${env.BUILD_URL}/rebuild\n\n" +
                        "${env.DB_WRITE_ERROR}\n\n" +
                        "Result: ${env.BUILD_LOG_PARSING_RESULT}\n\n" +
                        "Coredumps: ${env.COREDUMPS}\n\n" +
                        "Logs(ctest logs) for each test: http://max-tst-01.mariadb.com/LOGS/${env.JOB_NAME}-${env.BUILD_ID}/LOGS/",
                        replyTo: "${env.DEFAULT_REPLYTO}",
                        subject: "${env.DEFAULT_SUBJECT} (${env.name})",
                        to: 'mdbci-maxscale@googlegroups.com'
                }
                unstable {
                    call_cleanup() 
                }
                failure {
                    call_cleanup() 
                }
            }
        }
        
        @NonCPS
        def call_cleanup() {
            build job: 'cleanup', parameters: [
                string(name: 'build_full_name', value: "${env.JOB_NAME}-${env.BUILD_NUMBER}"),
                string(name: 'name', value: env.name),
                string(name: 'do_not_destroy_vm', value: env.do_not_destroy_vm)
            ]
        }
    concurrent: true
